#include "../include/ArbitraryType.h"
#include <iostream>
using namespace std;
#define PERSISION 100
void complement_flip(vector<unsigned char>& num) {
    if (num.size() < PERSISION) {
        cout << "ERROR: the size of number is less than PERSITIION" << endl;
        return;
    }
    for (int i = 0; i < PERSISION; i++) {
        num[i] = 9 - num[i];
    }
    num[0]++;
    for (int i = 0; i < PERSISION - 1; i++) {
        num[i + 1] += num[i] / 10;
        num[i] = num[i] % 10;
    }
    num[PERSISION - 1] %= 10;
}

Object::Object() {
    this->s.append("undefined!");
}

Object::~Object() {}

Number::Number(string s) : v1(PERSISION, 0), v2(PERSISION, 0) {
    bool flag = false;
    if (s[0] == '~') {
        flag = true;
        s.erase(s.begin());
    }
    int dot = s.length();
    for (dot = 0; dot < s.length(); dot++) {
        if (s[dot] == '.') break;
    }
    int idx1 = 0, idx2 = PERSISION - 2;
    for (int i = dot - 1; i >= 0; i--) {
        if (idx1 >= PERSISION - 1) break;
        v1[idx1++] = s[i] - '0';
    }
    for (int i = dot + 1; i < s.length(); i++) {
        if (idx2 < 0) break;
        v2[idx2--] = s[i] - '0';
    }
    if (flag) {
        ::complement_flip(this->v1);
        ::complement_flip(this->v2);
    }
}

/*
void Array::accept(IVisitor* v) {
    v->Visit(this);
}
*/

shared_ptr<Object> Number::accept(Object::IVisitor* visitor) {
    return visitor->Visit(this);
}

shared_ptr<Object> Object::accept(Object::IVisitor* visitor) {
    return nullptr;
}

string Object::output() {
    return this->s;
}

/*
string Array::output() {
    vector<shared_ptr<Object>>& v = this->v;
    string ret;
    ret.append("[");
    for (int i = 0; i < v.size(); i++) {
        ret.append("[");
        ret.append(v[i]->output());
        ret.append("]");
    }
    ret.append("]");
    return ret;
}
*/

string Number::output() {
    string ret;
    vector<unsigned char> v1 = this->v1;
    vector<unsigned char> v2 = this->v2;
    if (this->v1[PERSISION - 1] == 9) {
        complement_flip(v1);
        complement_flip(v2);
        ret.push_back('~');
    }
    int i = PERSISION - 2;
    while (i >= 0 && v1[i] == 0) i--;
    for (; i >= 0; i--) {
        ret.push_back(v1[i] + '0');
    }
    bool flag = true;
    i = 0;
    while (i <=  PERSISION - 2 && v2[i] == 0) i++;
    if (i <= PERSISION - 2) ret.push_back('.');
    for (int j = PERSISION - 2; j >= i; j--) {
        ret.push_back(v2[j] + '0');
    }
    return ret;
}

shared_ptr<Number> Number::add(vector<unsigned char>& ret, vector<unsigned char>& v1, vector<unsigned char>& v2) {
    for (int i = 0; i < PERSISION; i++) {
        ret[i] = v1[i] + v2[i];
    }
    for (int i = 0; i < PERSISION - 1; i++) {
        ret[i + 1] += ret[i] / 10;
        ret[i] = ret[i] % 10;
    }
    ret[PERSISION - 1] %= 10;
    if (ret[PERSISION - 1] == 0 || ret[PERSISION - 1] == 9) return nullptr;
    if (ret[PERSISION - 1] == 8) {
        ret[PERSISION - 1] = 9;
        return make_shared<Number>("~1");
    }
    ret[PERSISION - 1] = 0;
    return make_shared<Number>("1");
}

shared_ptr<Object> Number::operator+(Object* obj) {
    Number* ptr = dynamic_cast<Number*>(obj);
    if (ptr == nullptr) {
        return nullptr;
    }
    vector<unsigned char>& v1 = ptr->v1;
    vector<unsigned char>& v2 = ptr->v2;
    shared_ptr<Number> ret = make_shared<Number>("");
    shared_ptr<Number> a = add(ret->v2, v2, this->v2);
    if (a == nullptr) {
        add(ret->v1, v1, this->v1);
        return ret;
    }
    add(ret->v1, a->v1, this->v1);
    add(ret->v1, v1, ret->v1);
    return ret;
}

shared_ptr<Object> Number::operator-(Object* obj) {
    Number* ptr = dynamic_cast<Number*>(obj);
    if (ptr == nullptr) {
        return nullptr;
    }
    if (ptr->v1[PERSISION - 1] == 0) return this->operator+(ptr);
    shared_ptr<Number> p = make_shared<Number>(ptr->output());
    complement_flip(p->v1);
    complement_flip(p->v2);
    return this->operator+(p.get());
}

int Number::getSize() {
    return this->v1.size() + this->v2.size();
}
